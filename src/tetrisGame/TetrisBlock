package tetrisGame;

import java.awt.Color;
import java.util.Random;

public class TetrisBlock {
    private int[][] shape;
    private Color color;
    private int x=3,y=0;
    private int[][][] shapes;
    private int currentRotation;
    private Color[] availableColors={Color.red,Color.yellow,Color.MAGENTA,Color.GREEN,Color.WHITE};
    
    public TetrisBlock(int[][] shape,Color color){
        this.shape=shape;
        this.color=color;
        initShapes();
    }
    
    public void spawn(int gridWidth){
        Random r=new Random();
        currentRotation=r.nextInt(shapes.length);
        shape=shapes[currentRotation];
        y=-getHeight();
        x=randSpawn(gridWidth);
        //color=availableColors[r.nextInt(availableColors.length)];
    }
    
    public int randSpawn(int gridWidth){
        Random r=new Random();
        return r.nextInt(gridWidth-getWidth());
    }
    
    public int centSpawn(int gridWidth){
        return (gridWidth-getWidth())/2;
    }

    public int[][] getShape() {return shape;}
    public Color getColor() {return color;}
    public int getHeight(){ return shape.length;}
    public int getWidth(){  return shape[0].length;}
    public int getX() { return x;}
    public void setX(int x) {this.x = x;} 
    public int getY() { return y;}
    public void setY(int y) {this.y = y;}
    
    public void movDown(){ y++;}
    public void movLeft(){ x--;}
    public void movRight(){ x++;}
    public void rotate(){
        currentRotation++;
        if(currentRotation>3) currentRotation=0;
        shape=shapes[currentRotation];
    }
    
    public int getBottomEdge(){ return y+getHeight();}
    public int getLeftEdge(){ return x;}
    public int getRightEdge(){ return x+getWidth();}
    
    private void initShapes(){
        shapes=new int[4][][];
        for(int i=0;i<4;i++){
            int r=shape[0].length;
            int c=shape.length;
            shapes[i]= new int[r][c];
            
            for(int y=0;y<r;y++){
                for (int x=0;x<c;x++){
                    shapes[i][y][x]=shape[c-x-1][y];
                }
            }
            shape=shapes[i];
        }
    }
    
}
